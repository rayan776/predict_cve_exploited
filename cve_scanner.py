import json
import consts
import os

class CveScanner:

    """
        I have written this small class only to find some CVEs according to some characteristics, such as being classified as rejected, or those with missing CVSS, etc.
    """

    def __init__(self):
        self.cves = []

        for year in range (2013,2023):
            cve_path = consts.path_nvd + consts.cve_filename + str(year) + consts.json_end
            with open(cve_path, 'r') as json_file:
                self.cves.append(json.load(json_file)['CVE_Items'])

    def find_cves_without_cvss(self):
        if os.path.exists(consts.cve_without_cvss_url):
            os.remove(consts.cve_without_cvss_url)
        
        cves_without_cvss_ids = set()

        for dicts_cve in self.cves:
            for cve in dicts_cve:
                if ('baseMetricV3' not in cve['impact'].keys()):
                    cves_without_cvss_ids.add(cve['cve']['CVE_data_meta']['ID'])
        
        with open(consts.cve_without_cvss_url, 'a+') as cwc_file:
            cwc_file.write(f"Sum of CVEs without CVSS3 score: {len(cves_without_cvss_ids)}\n")

            for id in cves_without_cvss_ids:
                cwc_file.write(f"ID: {id}\n")

        
     
    def find_rejected_cves(self):

        if os.path.exists(consts.cve_rejects):
            os.remove(consts.cve_rejects)
        
        rejects_ids = set()

        for dicts_cve in self.cves:
            for cve in dicts_cve:
                if len(cve['cve']['description']['description_data'])>0:
                    if (cve['cve']['description']['description_data'][0]['value'].startswith('** REJECT')):
                        rejects_ids.add(cve['cve']['CVE_data_meta']['ID'])
        
        with open(consts.cve_rejects, 'a+') as rejects_file:
            rejects_file.write(f"Sum of reject CVEs: {len(rejects_ids)}\n")

            for id in rejects_ids:
                rejects_file.write(f"ID: {id}\n")
