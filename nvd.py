""" Written by : Kobra Khanmohammadi
"""

import datetime
import os
import requests
import consts
import utils


class NvdCve(object):

    def __init__(self):
        ""

    def download_cve(self):

        # Determine current year
        now = datetime.datetime.now()
        my_yr = now.year

        # Process cve files for last "n" years

        for index in range(consts.num_nvd_files):
            yr_processed = my_yr - index

            # get the meta file for the year being processed
            url_meta = (
                    consts.url_meta_base
                    + str(yr_processed)
                    + consts.url_meta_end
            )
            try:
                resp = requests.get(url_meta)

            except requests.exceptions.RequestException as e:
                continue

            meta_filename = (
                    consts.nvddir
                    + consts.nvd_meta_filename
                    + str(yr_processed)
            )

            # if file already exists then read the contents

            if os.path.isfile(meta_filename):
                meta_filecontents = open(meta_filename, 'r', encoding="utf-8").read()

                # read updated xml feed file since corresponding meta file
                # contents have changed.

                if meta_filecontents == resp.text:

                    continue
                else:
                    print('file read from nvd')
            else:
                print('\nMeta file does not exist:{0}'.format( meta_filename) )
                
            # Read the new json feed file
            if consts.url_json_middle == '':
                url_json = (
                        consts.url_json_base
                        + str(yr_processed)
                        + consts.url_json_end
                )
            else:
                url_json = (
                        consts.url_json_base
                        + consts.url_json_middle
                        + consts.url_json_end
                ) ### need to change

            (json_filename, json_filecontents) = utils.get_zip(url_json)

            # write this new / updated json feed file to disk as well

            if json_filename:
                # hardcode the filenames to avoid problems if NIST changes
                # names

                my_cve_filename = (
                        consts.nvdcve
                        + str(yr_processed)
                        + '.json'
                )

                print(
                    '\nSaving Json file I/P {0} as {1}\n\n'.format(
                        json_filename,
                        my_cve_filename
                    )
                )

                output_json = open(my_cve_filename, 'wb')
                output_json.write(json_filecontents)
                output_json.close()
        return None
