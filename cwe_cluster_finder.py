import re
import consts

class cwe_cluster_finder:

    def __init__(self):
        return

    def find_cluster(self, cwe):
        with open(consts.arbre_path) as arbre:
            datafile = arbre.readlines()
        
        with open(consts.liste_no_arbre_path) as not_in_arbre:
            datafile_not_in_arbre = not_in_arbre.readlines()

        for line in datafile:
            if '(' + cwe + ')' in line:
                if "Primary Cluster" in line:
                    return (cwe, None, 'arbre.txt')
                else:
                    m = self.find_primary_cluster(line)

                if "Secondary Cluster" in line:
                    return (m, cwe, 'arbre.txt')
                else:
                    x = self.find_secondary_cluster(line)
                    return (m, x, 'arbre.txt')

            else:
                for l in datafile_not_in_arbre:
                    if "CWE-"+cwe == l.split(",")[0]:
                        prim_cluster = l.split(",")[1]
                        sec_cluster = l.split(",")[2]
                        return (prim_cluster, sec_cluster.rstrip(), 'liste_no_arbre.csv')

    def find_primary_cluster(self,l):

        primary_cluster = None

        with open(consts.arbre_path) as arbre:
            datafile = arbre.readlines()

        primary = []
        ligne = []

        for i, line in enumerate(datafile, 1):
            if l in line:
                num_line_l = i

            if "Primary Cluster" in line:
                primary.append(str(i)+line)

        for p in primary:
            num_line_m = p.split("-")[0]

            if int(num_line_m) < num_line_l:
                ligne.append(p)

        primary_cluster = str(ligne[-1])
        primary_cluster = re.findall(r"\(\s*\+?(-?\d+)\s*\)", primary_cluster)
        primary_cluster = str(primary_cluster)
        primary_cluster = primary_cluster.split("'")[1]

        return primary_cluster

    def find_secondary_cluster(self,l):
        good_secondary_cluster = []
        m = self.find_primary_cluster(l)
        m = str('(' + m + ')')

        n = re.findall(r"\(\s*\+?(-?\d+)\s*\)", l)
        n = str(n)
        n = n.split("'")[1]
        n = str('(' + n + ')')

        secondary_cluster = None

        with open(consts.arbre_path) as arbre:
            
            datafile = arbre.readlines()
        
        secondarys = []

        for i, line in enumerate(datafile, 1):
            if n in line:
                num_line_n = int(i)

            if m in line:
                num_line_m = int(i)

            if "Secondary Cluster" in line:
                secondarys.append(str(i)+line)

        for s in secondarys:
            num_line_x = s.split('-')[0]
            num_line_x = int(num_line_x)

            if num_line_x > num_line_m and num_line_x < num_line_n:
                good_secondary_cluster.append(s)

        if len(good_secondary_cluster) == 0:
            return None

        else:
            secondary_cluster = str(good_secondary_cluster[-1])
            secondary_cluster = re.findall(r"\(\s*\+?(-?\d+)\s*\)", secondary_cluster)
            secondary_cluster = str(secondary_cluster)
            secondary_cluster = secondary_cluster.split("'")[1]

            return secondary_cluster